// <auto-generated />
using System;
using DisasterTracker.DataServices;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DisasterTracker.DataServices.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220515132003_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DisasterTracker.Data.Event.Event", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoExpire")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UpdateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("ApiId", "LastUpdateDate");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("DisasterTracker.Data.Event.EventImage", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InfrastructureMapImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OverviewMapImageAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("EventImage");
                });

            modelBuilder.Entity("DisasterTracker.Data.Event.EventStatistics", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CapitalExposed")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Hospitals")
                        .HasColumnType("int");

                    b.Property<int?>("Households")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Population0_14Affected")
                        .HasColumnType("int");

                    b.Property<int?>("Population15_64Affected")
                        .HasColumnType("int");

                    b.Property<int?>("PopulationAbove65Affected")
                        .HasColumnType("int");

                    b.Property<int?>("Schools")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalPopulation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventStatistics");
                });

            modelBuilder.Entity("DisasterTracker.Data.Event.EventImage", b =>
                {
                    b.HasOne("DisasterTracker.Data.Event.Event", "Event")
                        .WithOne("EventImage")
                        .HasForeignKey("DisasterTracker.Data.Event.EventImage", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DisasterTracker.Data.Event.EventStatistics", b =>
                {
                    b.HasOne("DisasterTracker.Data.Event.Event", "Event")
                        .WithMany("EventStatistics")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DisasterTracker.Data.Event.Event", b =>
                {
                    b.Navigation("EventImage");

                    b.Navigation("EventStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
